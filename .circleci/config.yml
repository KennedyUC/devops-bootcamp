version: 2.1

commands:
  install_awscli:
    description: Install AWSCLI, Tar, GZIP, Kubectl, yq & Curl
    steps:
      - run:
          name: Install AWSCLI, Tar, GZIP, Kubectl, yq & Curl
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            curl -o kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/

            sudo apt-get update
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod a+x /usr/local/bin/yq

            TERRAFORM_VERSION=$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | grep tag_name | cut -d: -f2 | tr -d \"\,\v | awk '{$1=$1};1')
            wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
            unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
            sudo mv terraform /usr/local/bin/

            aws --version
            kubectl version --client
            terraform --version

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible

  destroy-infrastructure:
    description: Destroy the AWS resources given a workflow ID.
    steps:
      - run:
          name: Destroy AWS Resources
          when: on_fail
          command: |
            AWS_REGION="us-east-1"
            echo Destroying AWS Resources for ${CIRCLE_WORKFLOW_ID:0:7}

            if [ "$(basename $PWD)" != "terraform-aws-infra" ]; then
                cd terraform-aws-infra
            fi
          
            terraform init

            terraform destroy -auto-approve -var-file="vars.tfvars" -var="user_access_key=${AWS_ACCESS_KEY}" \
                              -var="user_secret_key=${AWS_SECRET_KEY}" -var="aws_region=${AWS_REGION}"
            
jobs:
  build-frontend:
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Create the required .env file
          command: |
            echo REACT_BASE_API_URL=http://todo-api-service.todo-api.svc:5000 > ./frontend/.env
      - run:
          name: Install Make
          command: |
            sudo apt-get update
            sudo apt-get install make -y
            make --version
      - run:
          name: Build Frontend Image
          command: |
            make docker-login DOCKER_REPO=${DOCKER_REPO} DOCKER_PASSWORD=${DOCKER_PASSWORD}
            make build-frontend IMAGE_TAG=${CIRCLE_WORKFLOW_ID:0:7}

  build-backend:
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install Docker and Make
          command: |
            sudo apt-get update
            sudo apt-get install make -y
            make --version
      - run:
          name: Build Backend Image
          command: |
            make docker-login DOCKER_REPO=${DOCKER_REPO} DOCKER_PASSWORD=${DOCKER_PASSWORD}
            make build-backend IMAGE_TAG=${CIRCLE_WORKFLOW_ID:0:7}
            
  scan-frontend:
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout
      - run:
          name: Install Trivy
          command: |
            wget https://github.com/aquasecurity/trivy/releases/download/v0.20.0/trivy_0.20.0_Linux-64bit.tar.gz
            tar zxvf trivy_0.20.0_Linux-64bit.tar.gz
            sudo mv trivy /usr/local/bin/
      - run:
          name: Scan Frontend Docker Image
          command: trivy ${DOCKER_REPO}/web:${CIRCLE_WORKFLOW_ID:0:7}

  scan-backend:
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout
      - run:
          name: Install Trivy
          command: |
            wget https://github.com/aquasecurity/trivy/releases/download/v0.20.0/trivy_0.20.0_Linux-64bit.tar.gz
            tar zxvf trivy_0.20.0_Linux-64bit.tar.gz
            sudo mv trivy /usr/local/bin/
      - run:
          name: Scan Backend Docker Image
          command: trivy ${DOCKER_REPO}/api:${CIRCLE_WORKFLOW_ID:0:7}

  deploy-infrastructure:
    docker:
      - image: circleci/python:3.10
    environment:
      AWS_REGION: "us-east-1"
    steps:
      - checkout
      - install_awscli
      - run:
          name: Configure AWS CLI
          command: |
            aws configure set aws_access_key_id ${AWS_ACCESS_KEY} --profile default
            aws configure set aws_secret_access_key ${AWS_SECRET_KEY} --profile default
            aws configure set default.region ${AWS_REGION} --profile default
            aws configure set default.output csv --profile default
      - run:
          name: Provision AWS Resources
          command: |
            cd terraform-aws-infra
            terraform init

            if aws s3 ls "s3://${STATE_S3_BUCKET}" 2>&1 | grep -q 'NoSuchBucket'; then
              echo "Bucket does not exist. Aborting AWS Infrastructure Provisioning..."
              exit 1
            else
              echo "Bucket exists. Proceeding with AWS Infrastructure Provisioning..."  
              terraform apply -auto-approve -var-file="vars.tfvars" -var="user_access_key=${AWS_ACCESS_KEY}" \
                              -var="user_secret_key=${AWS_SECRET_KEY}" -var="aws_region=${AWS_REGION}"
            fi

      - destroy-infrastructure

  configure-infrastructure:
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["32:0b:48:76:92:d9:a4:18:03:82:e8:af:08:e6:6e:b1"] ##update this
      - run:
          name: Run Configure Server Ansible play
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-infrastructure
  
  deploy-db:
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["32:0b:48:76:92:d9:a4:18:03:82:e8:af:08:e6:6e:b1"]
      - run:
          name: Copy Deployment Manifests to Ansible
          command: |
            cp kubernetes/database/* .circleci/ansible/roles/deploy-db/files
      - run:
          name: Deploy Postgres Database to Minikube Cluster
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -vvv -i inventory.txt deploy-db.yml
      - destroy-infrastructure

  deploy-backend:
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["32:0b:48:76:92:d9:a4:18:03:82:e8:af:08:e6:6e:b1"]
      - run:
          name: Update the backend deployment script with the latest image
          command: |
            yq e -i ".spec.template.spec.containers[0].image = \"${DOCKER_REPO}/api:${CIRCLE_WORKFLOW_ID:0:7}\"" ./kubernetes/backend/api-deployment.yaml
      - run:
          name: Copy Deployment Manifests to Ansible
          command: |
            cp kubernetes/backend/* .circleci/ansible/roles/deploy-backend/files
      - run:
          name: Deploy Backend to Minikube Cluster
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -vvv -i inventory.txt deploy-backend.yml
      - destroy-infrastructure

  deploy-frontend:
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["32:0b:48:76:92:d9:a4:18:03:82:e8:af:08:e6:6e:b1"]
      - run:
          name: Update the frontend deployment script with the latest image
          command: |
            yq e -i ".spec.template.spec.containers[0].image = \"${DOCKER_REPO}/web:${CIRCLE_WORKFLOW_ID:0:7}\"" ./kubernetes/frontend/web-deployment.yaml
      - run:
          name: Copy Deployment Manifests to Ansible
          command: |
            cp kubernetes/frontend/* .circleci/ansible/roles/deploy-frontend/files
      - run:
          name: Deploy Frontend to Minikube Cluster
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -vvv -i inventory.txt deploy-frontend.yml
      - destroy-infrastructure

  clean-up:
    docker:
      - image: circleci/python:3.10
    environment:
      AWS_REGION: "us-east-1"
    steps:
      - checkout
      - install_awscli
      - run:
          name: Configure AWS CLI
          command: |
            aws configure set aws_access_key_id ${AWS_ACCESS_KEY} --profile default
            aws configure set aws_secret_access_key ${AWS_SECRET_KEY} --profile default
            aws configure set default.region ${AWS_REGION} --profile default
            aws configure set default.output csv --profile default
      - run:
          name: Destroy AWS Resources
          command: |
            echo Destroying AWS Resources for ${CIRCLE_WORKFLOW_ID:0:7}

            if [ "$(basename $PWD)" != "terraform-aws-infra" ]; then
                cd terraform-aws-infra
            fi
          
            terraform init

            terraform destroy -auto-approve -var-file="vars.tfvars" -var="user_access_key=${AWS_ACCESS_KEY}" \
                              -var="user_secret_key=${AWS_SECRET_KEY}" -var="aws_region=${AWS_REGION}"
          
workflows:
  todo-app-dev:
    jobs:
      - build-frontend
      - build-backend
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [scan-frontend, scan-backend]
          filters:
            branches:
              only: [dev]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-db:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [deploy-db]
      - deploy-frontend:
          requires: [deploy-backend]
      # - clean-up
          #requires: [deploy-frontend]