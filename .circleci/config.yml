version: 2.1

jobs:
  build-frontend:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install Make
          command: |
            sudo apt-get update
            sudo apt-get install make -y
            make --version
      - run:
          name: Build Frontend
          command: |
            make docker-login DOCKER_REPO=${DOCKER_REPO} DOCKER_PASSWORD=${DOCKER_PASSWORD}
            make build-frontend IMAGE_TAG=${CIRCLE_WORKFLOW_ID:0:7}

  build-backend:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install Docker and Make
          command: |
            sudo apt-get update
            sudo apt-get install make -y
            make --version
      - run:
          name: Build Backend
          command: |
            make docker-login DOCKER_REPO=${DOCKER_REPO} DOCKER_PASSWORD=${DOCKER_PASSWORD}
            make build-backend IMAGE_TAG=${CIRCLE_WORKFLOW_ID:0:7}
            

#   scan-frontend:
#     docker:
#       - image: cimg/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - frontend-deps-{{ checksum "frontend/package-lock.json" }}
#       - run:
#           name: Scan Frontend Packages
#           command: |
#             cd frontend
#             npm install                       
#             npm audit fix --force --audit-level=critical

#   scan-backend:
#     docker: 
#       - image: python:3.7-slim
#     steps:
#       - checkout
#       - run:
#           name: Scan Backend Packages
#           command: |
#             cd backend
#             apt-get update && apt-get install -y make && rm -rf /var/lib/apt/lists/*
#             make scan

#   deploy-infrastructure:
#     docker:
#       - image: cimg/python:3.10   #Executor
#     steps:
#       - checkout
#       - install_awscli
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               --tags Project=Udapeople \
#               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
#       - run:
#           name: Ensure front-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --tags project=udapeople \
#               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
#       - run:
#           name: Add back-end IP address to ansible inventory
#           command: |
#             BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
#               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --output text)
#             echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
#             cat .circleci/ansible/inventory.txt
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt
#       - destroy-environment
#       # Here's where you will add some code to rollback on failure

#   configure-infrastructure:
#     docker:
#       # Docker image here that supports Ansible
#       - image: cimg/python:3.10   #Executor
#     steps:
#       - checkout
#       - install_ansible
#       - install_awscli
#       - add_ssh_keys:
#           fingerprints: ["49:d9:d8:fa:58:1d:4d:e0:c8:09:de:e4:6d:36:1d:58"]
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Run Configure server Ansible play
#           command: |
#             cd .circleci/ansible
#             cat inventory.txt
#             ansible-playbook -i inventory.txt configure-server.yml
#       - destroy-environment  # Here's where you will add some code to rollback on failure  

#   run-migrations:
#     docker:
#       - image: cimg/python:3.10   #Executor
#     steps:
#       - checkout
#       - install_awscli
#       - install_nodejs
#       - restore_cache:
#           keys: [backend-deps]
#       - run:
#           name: Run migrations
#           command: |
#             cd backend
#             npm install
#             npm run migrations > migrations_dump.txt
#             cat migrations_dump.txt
#       - run:
#           name: Send migration results to kvdb.io
#           command: |
#             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
#             then
#               curl https://kvdb.io/BfKBJtWvv4CdbtKFsw3g8V/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
#             else
#               echo "No migrations are pending" 
#             fi
#       # rolls back; should migration fail
#       - destroy-environment
#       - revert-migrations  

#   deploy-frontend:
#     docker:
#       - image: cimg/python:3.10   #Executor
#     steps:
#       - checkout
#       - install_awscli
#       - install_nodejs
#       - restore_cache:
#           keys: [backend-deps]
#       - run:
#           name: Install dependencies
#           command: |
#             cd frontend
#             npm install
#       - run:
#           name: Get backend url
#           command: |
#             BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
#               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --output text)
#             export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
#             echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
#             cat frontend/.env
#       - run:
#           name: Deploy frontend objects
#           command: |
#             cd frontend
#             npm run build
#             tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist            
#             aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
#       # rolls back; should migration fail
#       - destroy-environment
#       - revert-migrations 

#   deploy-backend:
#     docker:
#       - image: cimg/python:3.10   #Executor
#     steps:
#       - checkout
#       - install_ansible
#       - install_awscli
#       - install_nodejs
#       - restore_cache:
#           keys: [backend-deps]
#       - add_ssh_keys:
#           fingerprints: ["49:d9:d8:fa:58:1d:4d:e0:c8:09:de:e4:6d:36:1d:58"]
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install dependencies
#           command: |
#             cd backend
#             npm install
#       - run:
#           name: Package Backend
#           command: |
#             cd backend
#             npm run build
#             tar -czf artifact.tar.gz dist/* package*
#             cd ..
#             mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
#             cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
#       - run:
#           name: Deploy backend
#           command: |
#             export TYPEORM_MIGRATIONS_DIR=./migrations
#             export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
#             export TYPEORM_MIGRATIONS=./migrations/*.ts
#             cd .circleci/ansible
#             cat inventory.txt
#             ansible-playbook -vvv -i inventory.txt deploy-backend.yml
# # rolls back; should migration fail
#       - destroy-environment
#       - revert-migrations 

#   smoke-test:
#     docker:
#       - image: cimg/base:stable   #Executor
#     steps:
#       - checkout
#       - install_awscli
#       - install_nodejs
#       - run:
#           name: Backend smoke test.
#           command: |
#             BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
#               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --output text)
#             export API_URL=http://${BACKEND_PUBLIC_IP}:3030
#             if curl --connect-timeout 60 $API_URL/api/status | grep "ok"
#             then
#               exit 0
#             else
#               exit 1
#             fi
#       - run:
#           name: Frontend smoke test.
#           command: |
#             FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
#             if curl -s $FRONTEND_WEBSITE | grep "Welcome"
#             then
#               # This is the intentional error, if "Welcome" is indeed in the response this step will exit with exit code 1
#               exit 0
#             else
#               exit 1
#             fi
#       # rolls back; should smoke test fail
#       - destroy-environment
#       - revert-migrations  

#   cloudfront-update:
#     docker:
#       - image: cimg/base:stable   #Executor
#       # - image: circleci/node:13.8.0    #Executor
#       # - image: alpine:latest      #Executor
#     steps:
#       - checkout
#       - install_awscli
#       - install_nodejs
#       - run:
#           name: Install dependencies
#           command: |
#             sudo apt-get update -y
#             sudo apt install -y curl
#       - run:
#           name: Save Old Workflow ID to kvdb.io
#           command: |
#             export OLD_WORKFLOW_ID=$(aws cloudformation \
#               list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#               --no-paginate --output text)
#             echo "Old Workflow ID: $OLD_WORKFLOW_ID"
#             curl https://kvdb.io/BfKBJtWvv4CdbtKFsw3g8V/old_workflow_id -d "${OLD_WORKFLOW_ID}"
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             aws cloudformation deploy \
#             --template-file .circleci/files/cloudfront.yml \
#             --stack-name InitialStack \
#             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
#             echo Current Workflow ID: "${CIRCLE_WORKFLOW_ID:0:7}"
#       # rolls back; should migration fail
#       - destroy-environment
#       - revert-migrations

#   cleanup:
#     docker:                                                                           
#       - image: cimg/base:stable   #Executor
#     steps:
#       - checkout
#       - install_awscli
#       - install_nodejs
#       - run:
#           name: Remove old stacks and files
#           command: |
#             export STACKS=($(aws cloudformation list-stacks \
#                 --query "StackSummaries[*].StackName" \
#                 --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
#             echo Stack names: "${STACKS[@]}"

#             export OldWorkflowID=$(curl --insecure https://kvdb.io/BfKBJtWvv4CdbtKFsw3g8V/old_workflow_id)
#             echo Old Workflow ID: $OldWorkflowID

#             if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
#             then
#               echo "---------------------------Delete Confirmed--------------------------------"
#               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
#               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
#               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
#             else
#               echo "---------------------------Cannot Cleanup----------------------------------"
#             fi 
          
workflows:
  dev:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [dev]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]